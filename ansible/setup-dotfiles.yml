- hosts: localhost 
  vars:
    home_dir: "{{ ansible_env.HOME }}" 
    dotfiles_dir: "{{ playbook_dir }}/.."
    modules_dir: '/etc/ansible/modules'
    common:
      - bash-completion
      - docker
      - git
      - gpg
      - python3
      - tree
      - watch
      - curl
      - wget
  tasks:
  # +---------------------------------+
  # | Ansible                         |
  # +---------------------------------+
  # First, we setup Ansible with our community roles
  - include_tasks: 'tasks/setup-ansible.yml'

  # Include our per-OS vars
  - include_tasks: "tasks/os-specific.yml"
  - include_vars: "{{ os_vars }}"
    when: vars_exist

  # +---------------------------------+
  # | Debugging                       |
  # +---------------------------------+
  - include_tasks: 'tasks/debug.yml'

  # +---------------------------------+
  # | Dotfiles                        |
  # +---------------------------------+
  # | TODO:                           |
  # | - Move dotfiles to separate repo|
  # +---------------------------------+
  # Symlink over our dotfile configs
  - name: Symlink config files
    file:
      src: '{{ item.src }}'
      dest: '{{ home_dir }}/{{ item.path }}'
      state: link
      force: yes
    with_community.general.filetree: '{{ dotfiles_dir }}/home/'
    when: item.state == 'file'

  # +---------------------------------+
  # | OS-independent                  |
  # +---------------------------------+
  # Install the common packages
  - name: Install with {{ ansible_pkg_mgr }}
    package:
      name: "{{ item }}"
      state: present
    with_items: "{{ utils }}"
    become: "{{ false if ansible_pkg_mgr == 'homebrew' else true }}"
    # action: >
    #   {{ ansible_pkg_mgr }} name="{{ utils }}" state=latest

  # Run setup for stuff running on all systems
  - include_tasks: "tasks/setup-fonts.yml"
  - include_tasks: "tasks/setup-zsh.yml"

  # +---------------------------------+
  # | OS-dependent                    |
  # +---------------------------------+
  # Run our per-OS tasks
  - include_tasks: "{{ os_tasks }}"
    when: tasks_exist
